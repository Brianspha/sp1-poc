// SPDX-License-Identifier: MIT
pragma solidity ^0.8.30;

///
/// @title IValidatorManager
/// @author Brianspha
/// @notice Core validator management interface for bridge state verification
///
/// OVERVIEW:
/// This system enables decentralized validation of cross-chain bridge states through
/// economic incentives and cryptographic verification. Validators stake tokens to
/// participate in submitting bridge contract state roots, which are then verified
/// off-chain using SP1 zero-knowledge proofs which generate Groth16 Proofs for
/// onchain verification.
///
/// VALIDATOR LIFECYCLE:
/// 1. Stake minimum tokens to become validator
/// 2. Submit BLS-signed attestations of bridge contract roots
/// 3. Earn rewards for honest participation
/// 4. Face slashing for malicious/incorrect submissions
///
/// CONSENSUS MECHANISM:
/// - Validators monitor bridge contracts across supported chains
/// - Submit signed attestations of (chainId, blockNumber, bridgeRoot, stateRoot)
/// - Off-chain SP1 prover verifies submitted roots against actual chain state
/// - Only cryptographically verified roots are accepted for bridge claims
///
/// ECONOMIC SECURITY:
/// - Minimum stake requirement prevents spam
/// - Slashing penalty deters malicious behavior
/// - Reward distribution incentivizes honest participation
/// - Gradual unstaking prevents sudden validator exits
///
import {IValidatorTypes} from "./IValidatorTypes.sol";

interface IValidatorManager is IValidatorTypes {
    /// @notice Initialize the ValidatorManager contract
    /// @param stakingManager Address of the staking manager
    /// @param verifier SP1VerifierGateway which can be used to verify proofs for any version of SP1
    /// @param programKey The verification key for the Bridge
    function initialize(address stakingManager, address verifier, bytes32 programKey) external;

    /// @notice Submit bridge state root attestation
    /// @param attestation Signed attestation of bridge state - see {IValidatorTypes.BridgeAttestation}
    /// @dev Validator must be active and signature must be valid
    function submitAttestation(BridgeAttestation calldata attestation) external;

    /// @notice Submit multiple attestations in a single transaction
    /// @param attestations signed bridge attestations - see {IValidatorTypes.AggregatedBridgeAttestation}
    /// @dev More gas efficient for validators monitoring multiple chains
    function submitAggregatedAttestation(AggregatedBridgeAttestation calldata attestations)
        external;

    /// @notice used to set all validators who supplied correct attestions
    /// @param params Prams generated by SP1 VM  - see {IValidatorTypes.VerificationParams}
    /// @dev This is called after the SP1 prover completes validating bridge roots
    function finaliseAttestations(VerificationParams calldata params) external;

    /// @notice Check if bridge root has been verified by SP1 system
    /// @param params Root verification parameters - see {IValidatorTypes.RootParams}
    /// @return verified True if root has passed SP1 verification
    function isRootVerified(RootParams calldata params) external view returns (bool verified);

    /// @notice Get validator information
    /// @param validator Validator address
    /// @return info Complete validator information struct - see {IValidatorTypes.ValidatorInfo}
    function getValidator(address validator) external view returns (ValidatorInfo memory info);

    /// @notice Get all active validators
    /// @return validators Array of active validator addresses
    function getActiveValidators() external view returns (address[] memory validators);

    /// @notice Registers a new validator
    ///@dev Can only be called by StakeManager
    /// @param info Validator info - see {IValidatorTypes.ValidatorInfo}
    function addValidator(ValidatorInfo memory info) external;

    /// @notice Removes a  validator
    ///@dev Can only be called by StakeManager
    /// @param validator Validators address
    function removeValidator(address validator) external;

    /// @notice Hash proof of possession message to curve point
    /// @param blsPubkey The BLS public key to prove possession of
    /// @param attestation signed bridge attestation - see {IValidatorTypes.AggregatedBridgeAttestation}
    /// @return The message hashed to a curve point for BLS verification
    function proofOfPossessionMessage(
        uint256[4] memory blsPubkey,
        BridgeAttestation calldata attestation
    )
        external
        view
        returns (uint256[2] memory);

    /// @notice returns the current epoch duration
    function epochDuration() external view returns (uint256 duration);

    /// @notice Calculates the total number of epochs this year
    function getEpochsPerYear() external view returns (uint256 epochs);

    /// @notice allows for the distribution of rewards
    function distributeRewards() external;

    /// @notice Hash proof of possession message to curve point
    /// @param attestation signed bridge attestation - see {IValidatorTypes.AggregatedBridgeAttestation}
    /// @return The message hashed to a curve point for BLS verification
    function proofOfPossessionMessage(AggregatedBridgeAttestation calldata attestation)
        external
        view
        returns (uint256[2] memory);

    /// @notice Updates the staking manager address
    /// @param stakingManager The new manager address
    /// @dev Only owner can make this call
    function updateStakingManager(address stakingManager) external;

    /// @notice Allows an admin to update the program key
    /// @param programKey The verification key for the Bridge i.e RISC-V program.
    function updateProgramKey(bytes32 programKey) external;
}
